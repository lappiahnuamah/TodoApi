AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to launch a simple EC2 instance in the default VPC with Ubuntu AMI (ami-053a617c6207ecc7b) and t2.micro instance type, including AutoScalingGroup, Load Balancer, Listener, and Target Group.
  These resources are provisioned in the region [us-east-2]

Parameters:
  KeyName:
    Description: The name of an existing EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: qatest
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  VpcCidr:
    Description: The CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16 # Adjust the VPC CIDR block as needed

  PublicSubnet1Cidr:
    Description: The CIDR block for the first public subnet
    Type: String
    Default: 10.0.4.0/24 # Adjust the CIDR block for the first public subnet as needed

  PublicSubnet2Cidr:
    Description: The CIDR block for the second public subnet
    Type: String
    Default: 10.0.5.0/24 # Adjust the CIDR block for the second public subnet as needed

  SSLCertificateArn:
    Description: The ARN of the SSL certificate to use for the HTTPS listener
    Type: String
    Default: arn:aws:acm:us-east-2:001526952227:certificate/61754a7f-74cd-4c90-a12c-9ac58f147f6d

Resources:
  # VPC definition
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Law2VPC # Optionally change the name tag for the VPC

  # Internet Gateway definition
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Law2InternetGateway # Optionally change the name tag for the Internet Gateway

  # Attach Internet Gateway to the VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # Selects the first availability zone
      MapPublicIpOnLaunch: true # Automatically assign public IPs to instances
      Tags:
        - Key: Name
          Value: PublicSubnet1 # Optionally change the name tag for the subnet

  # Public Subnet 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ] # Selects the second availability zone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Public Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Route for Public Route Table to the Internet
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet 1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH, HTTP, and HTTPS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Load Balancer
  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: "LawwLoadBalancer"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: LawwLoadBalancer

  # Target Group
  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: "LawwTargetGroup"
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: LawwTargetGroup

  # HTTP Listener
  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  # HTTPS Listener
  MyLoadBalancerListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 443
      Protocol: HTTPS

  # IAM Role for EC2 instances
  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "ACMAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "acm:DescribeCertificate"
                  - "acm:GetCertificate"
                  - "acm:ListCertificates"
                Resource: !Ref SSLCertificateArn

  # IAM Instance Profile
  IAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref IAMRole

  # Auto Scaling Launch Configuration
  MyLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-09040d770ffe2224f # Updated to match the description
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo '1'
          sudo apt-get update -y
          sudo apt-get install -y ruby wget
          sudo apt-get install -y cloud-utils apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          sudo apt-get install -y docker-ce
          usermod -aG docker ubuntu
          # Install docker-compose
          sudo curl -L https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          cd /home/ubuntu
          wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto
          sudo systemctl start codedeploy-agent
          sudo systemctl status codedeploy-agent
          git clone --branch master https://github.com/lappiahnuamah/TodoApi.git /home/ubuntu/TodoApi
          cd /home/ubuntu/TodoApi
          sudo docker-compose up -d --build

  # Auto Scaling Group
  MyAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref MyLaunchConfig
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref MyTargetGroup
      Tags:
        - Key: Name
          Value: LawwAutoScalingInstance
          PropagateAtLaunch: true

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: The ID of the first public subnet
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: The ID of the second public subnet
    Value: !Ref PublicSubnet2

  SecurityGroupId:
    Description: The ID of the instance security group
    Value: !Ref SecurityGroup

  InternetGatewayId:
    Description: The ID of the Internet Gateway
    Value: !Ref InternetGateway

  LoadBalancerDNSName:
    Description: DNS Name of the Load Balancer
    Value: !GetAtt MyLoadBalancer.DNSName
